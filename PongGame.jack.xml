<class>
<keyword> class </keyword>
<identifier> PongGame </identifier>
PongGame class
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<identifier> PongGame </identifier>
<identifier> instance </identifier>
instance PongGame static 0 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> Bat </identifier>
<identifier> bat </identifier>
bat Bat field 0 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> Ball </identifier>
<identifier> ball </identifier>
ball Ball field 1 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall </identifier>
wall int field 2 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
exit boolean field 3 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> score </identifier>
score int field 4 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lastWall </identifier>
lastWall int field 5 define
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> batWidth </identifier>
batWidth int field 6 define
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> PongGame </identifier>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
Screen subroutine
<symbol> . </symbol>
<identifier> clearScreen </identifier>
clearScreen subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batWidth </identifier>
batWidth int field 6 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bat </identifier>
bat Bat field 0 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Bat </identifier>
Bat class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> batWidth </identifier>
batWidth int field 6 used
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ball </identifier>
ball Ball field 1 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Ball </identifier>
Ball class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball </identifier>
ball subroutine
<symbol> . </symbol>
<identifier> setDestination </identifier>
setDestination subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
Screen subroutine
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
drawRectangle subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> moveCursor </identifier>
moveCursor subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> exit </identifier>
exit boolean field 3 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> score </identifier>
score int field 4 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
wall int field 2 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> lastWall </identifier>
lastWall int field 5 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
this PongGame argument 0 define
<keyword> void </keyword>
<identifier> dispose </identifier>
dispose subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat </identifier>
bat subroutine
<symbol> . </symbol>
<identifier> dispose </identifier>
dispose subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball </identifier>
ball subroutine
<symbol> . </symbol>
<identifier> dispose </identifier>
dispose subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
Memory subroutine
<symbol> . </symbol>
<identifier> deAlloc </identifier>
deAlloc subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> newInstance </identifier>
newInstance subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> instance </identifier>
instance PongGame static 0 used
<symbol> = </symbol>
<expression>
<term>
<identifier> PongGame </identifier>
PongGame class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<identifier> PongGame </identifier>
<identifier> getInstance </identifier>
getInstance subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> instance </identifier>
instance PongGame static 0 used
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
this PongGame argument 0 define
<keyword> void </keyword>
<identifier> run </identifier>
run subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
key char local 0 define
<symbol> ; </symbol>
</varDec>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit </identifier>
exit boolean field 3 used
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key </identifier>
key char local 0 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit </identifier>
exit boolean field 3 used
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> key </identifier>
key char local 0 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
Keyboard class
<symbol> . </symbol>
<identifier> keyPressed </identifier>
keyPressed subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat </identifier>
bat subroutine
<symbol> . </symbol>
<identifier> move </identifier>
move subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> moveBall </identifier>
moveBall subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Sys </identifier>
Sys subroutine
<symbol> . </symbol>
<identifier> wait </identifier>
wait subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key </identifier>
key char local 0 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat </identifier>
bat subroutine
<symbol> . </symbol>
<identifier> setDirection </identifier>
setDirection subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key </identifier>
key char local 0 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat </identifier>
bat subroutine
<symbol> . </symbol>
<identifier> setDirection </identifier>
setDirection subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key </identifier>
key char local 0 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> exit </identifier>
exit boolean field 3 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key </identifier>
key char local 0 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit </identifier>
exit boolean field 3 used
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> key </identifier>
key char local 0 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
Keyboard class
<symbol> . </symbol>
<identifier> keyPressed </identifier>
keyPressed subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat </identifier>
bat subroutine
<symbol> . </symbol>
<identifier> move </identifier>
move subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> moveBall </identifier>
moveBall subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Sys </identifier>
Sys subroutine
<symbol> . </symbol>
<identifier> wait </identifier>
wait subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> exit </identifier>
exit boolean field 3 used
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> moveCursor </identifier>
moveCursor subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
this PongGame argument 0 define
<keyword> void </keyword>
<identifier> moveBall </identifier>
moveBall subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bouncingDirection </identifier>
bouncingDirection int local 0 define
<symbol> , </symbol>
<identifier> batLeft </identifier>
batLeft int local 1 define
<symbol> , </symbol>
<identifier> batRight </identifier>
batRight int local 2 define
<symbol> , </symbol>
<identifier> ballLeft </identifier>
ballLeft int local 3 define
<symbol> , </symbol>
<identifier> ballRight </identifier>
ballRight int local 4 define
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
wall int field 2 used
<symbol> = </symbol>
<expression>
<term>
<identifier> ball </identifier>
ball Ball field 1 used
<symbol> . </symbol>
<identifier> move </identifier>
move subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
wall int field 2 used
</term>
<symbol> &gt; </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
wall int field 2 used
</term>
<symbol> = </symbol>
<term>
<identifier> lastWall </identifier>
lastWall int field 5 used
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> lastWall </identifier>
lastWall int field 5 used
<symbol> = </symbol>
<expression>
<term>
<identifier> wall </identifier>
wall int field 2 used
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection </identifier>
bouncingDirection int local 0 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batLeft </identifier>
batLeft int local 1 used
<symbol> = </symbol>
<expression>
<term>
<identifier> bat </identifier>
bat Bat field 0 used
<symbol> . </symbol>
<identifier> getLeft </identifier>
getLeft subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batRight </identifier>
batRight int local 2 used
<symbol> = </symbol>
<expression>
<term>
<identifier> bat </identifier>
bat Bat field 0 used
<symbol> . </symbol>
<identifier> getRight </identifier>
getRight subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ballLeft </identifier>
ballLeft int local 3 used
<symbol> = </symbol>
<expression>
<term>
<identifier> ball </identifier>
ball Ball field 1 used
<symbol> . </symbol>
<identifier> getLeft </identifier>
getLeft subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ballRight </identifier>
ballRight int local 4 used
<symbol> = </symbol>
<expression>
<term>
<identifier> ball </identifier>
ball Ball field 1 used
<symbol> . </symbol>
<identifier> getRight </identifier>
getRight subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
wall int field 2 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> exit </identifier>
exit boolean field 3 used
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batLeft </identifier>
batLeft int local 1 used
</term>
<symbol> &gt; </symbol>
<term>
<identifier> ballRight </identifier>
ballRight int local 4 used
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batRight </identifier>
batRight int local 2 used
</term>
<symbol> &lt; </symbol>
<term>
<identifier> ballLeft </identifier>
ballLeft int local 3 used
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit </identifier>
exit boolean field 3 used
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> ballRight </identifier>
ballRight int local 4 used
</term>
<symbol> &lt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batLeft </identifier>
batLeft int local 1 used
</term>
<symbol> + </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection </identifier>
bouncingDirection int local 0 used
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> ballLeft </identifier>
ballLeft int local 3 used
</term>
<symbol> &gt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batRight </identifier>
batRight int local 2 used
</term>
<symbol> - </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection </identifier>
bouncingDirection int local 0 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batWidth </identifier>
batWidth int field 6 used
<symbol> = </symbol>
<expression>
<term>
<identifier> batWidth </identifier>
batWidth int field 6 used
</term>
<symbol> - </symbol>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat </identifier>
bat subroutine
<symbol> . </symbol>
<identifier> setWidth </identifier>
setWidth subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> batWidth </identifier>
batWidth int field 6 used
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> score </identifier>
score int field 4 used
<symbol> = </symbol>
<expression>
<term>
<identifier> score </identifier>
score int field 4 used
</term>
<symbol> + </symbol>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> moveCursor </identifier>
moveCursor subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printInt </identifier>
printInt subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> score </identifier>
score int field 4 used
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball </identifier>
ball subroutine
<symbol> . </symbol>
<identifier> bounce </identifier>
bounce subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> bouncingDirection </identifier>
bouncingDirection int local 0 used
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
