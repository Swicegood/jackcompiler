<class>
<keyword> class </keyword>
<identifier> Main </identifier>
Main class
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
main subroutine
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> a </identifier>
a Array local 0 define
<symbol> , </symbol>
<identifier> b </identifier>
b Array local 1 define
<symbol> , </symbol>
<identifier> c </identifier>
c Array local 2 define
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
a Array local 0 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Array </identifier>
Array class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
b Array local 1 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Array </identifier>
Array class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> = </symbol>
<expression>
<term>
<identifier> Array </identifier>
Array class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> + </symbol>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> * </symbol>
<term>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
</term>
<symbol> - </symbol>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> Main </identifier>
Main class
<symbol> . </symbol>
<identifier> double </identifier>
double subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> = </symbol>
<expression>
<term>
<identifier> c </identifier>
c Array local 2 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printInt </identifier>
printInt subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> println </identifier>
println subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printInt </identifier>
printInt subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> println </identifier>
println subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printInt </identifier>
printInt subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> c </identifier>
c Array local 2 used
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> println </identifier>
println subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> c </identifier>
c Array local 2 used
</term>
<symbol> = </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Main </identifier>
Main subroutine
<symbol> . </symbol>
<identifier> fill </identifier>
fill subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c </identifier>
c Array local 2 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
b Array local 1 used
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
a Array local 0 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> + </symbol>
<term>
<identifier> c </identifier>
c Array local 2 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printInt </identifier>
printInt subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> c </identifier>
c Array local 2 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> println </identifier>
println subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printString </identifier>
printString subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> printInt </identifier>
printInt subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> b </identifier>
b Array local 1 used
<symbol> [ </symbol>
<expression>
<term>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
Output subroutine
<symbol> . </symbol>
<identifier> println </identifier>
println subroutine
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> double </identifier>
double subroutine
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> a </identifier>
a int argument 0 define
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> a </identifier>
a int argument 0 used
</term>
<symbol> * </symbol>
<term>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> fill </identifier>
fill subroutine
<symbol> ( </symbol>
<parameterList>
<identifier> Array </identifier>
<identifier> a </identifier>
a Array argument 0 define
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
size int argument 1 define
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> size </identifier>
size int argument 1 used
</term>
<symbol> &gt; </symbol>
<term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> size </identifier>
size int argument 1 used
<symbol> = </symbol>
<expression>
<term>
<identifier> size </identifier>
size int argument 1 used
</term>
<symbol> - </symbol>
<term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
a Array argument 0 used
<symbol> [ </symbol>
<expression>
<term>
<identifier> size </identifier>
size int argument 1 used
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array </identifier>
Array class
<symbol> . </symbol>
<identifier> new </identifier>
new subroutine
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
